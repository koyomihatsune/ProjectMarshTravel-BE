name: build-publish

on:
  push:
    branches:
      - staging

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      shouldRunDeploy: ${{ steps.laststep.outputs.SHOULD_RUN_DEPLOY }}
    steps:
      - name: Checkout lastest code with adaptable branches
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      - name: Determine changed services
        id: changes
        run: |
          echo "Current branch to compare modified services is $(git rev-parse --abbrev-ref HEAD)"
          git fetch 
          temp_services_changed=()
          temp_is_common_changed=false
          temp_services_changed=($(git diff HEAD^ --name-only | grep '^apps/' | cut -d/ -f2 | sort -u))
          if git diff HEAD^ --name-only | grep -qvE '^apps/|^\.github/workflows/'; then
            temp_is_common_changed=true
          fi
          echo "Modified services: ${temp_services_changed[@]}"
          echo "Is common services changed: $temp_is_common_changed"
          if (( ${#temp_services_changed[@]} == 0 )); then
            echo "IS_NO_SERVICES_CHANGED=true" >> $GITHUB_ENV
          else
            echo "IS_NO_SERVICES_CHANGED=false" >> $GITHUB_ENV
          fi
          echo "SERVICES_CHANGED=$temp_services_changed" >> $GITHUB_ENV
          echo "IS_COMMON_CHANGED=$temp_is_common_changed" >> $GITHUB_ENV

      - name: Build services
        id: laststep
        run: |
          echo "$IS_COMMON_CHANGED"
          echo "$SERVICES_CHANGED"
          echo "$IS_NO_SERVICES_CHANGED"
          if [ "$IS_COMMON_CHANGED" = true ]; then
            for service in apps/*; do
              if [ -d "$service" ]; then
                echo "Build $(basename "$service" | cut -d'/' -f2)"
                docker build -t "ghcr.io/marshtravel/marshtravel-$(basename "$service" | cut -d'/' -f2):lastest" -f $service/Dockerfile .
              fi
            done
          else
            if [ "$IS_NO_SERVICES_CHANGED" = true ]; then
              echo "No services changed, did not build anything."
            else 
              for service in "${SERVICES_CHANGED[@]}"; do
                echo "Build $service"
                docker build -t "ghcr.io/marshtravel/marshtravel-$service:lastest" -f "apps/$service/Dockerfile" .
              done
            fi
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to GitHub Packages
        run: |
          if [ "$IS_COMMON_CHANGED" = true ]; then
            for service in apps/*; do
              if [ -d "$service" ]; then
                echo "Pushing marshtravel-$(basename "$service" | cut -d'/' -f2) image"
                docker push "ghcr.io/marshtravel/marshtravel-$(basename "$service" | cut -d'/' -f2):lastest"
              fi
            done
            echo "SHOULD_RUN_DEPLOY=true" >> $GITHUB_OUTPUT
          else
            if [ "$IS_NO_SERVICES_CHANGED" = true ]; then
              echo "No services changed, did not build anything."
              echo "SHOULD_RUN_DEPLOY=$IS_NO_SERVICES_CHANGED" >> $GITHUB_OUTPUT
            else 
              for service in "${SERVICES_CHANGED[@]}"; do
                echo "Pushing marshtravel-$service image"
                docker push "ghcr.io/marshtravel/marshtravel-$service:lastest"
              done
              echo "SHOULD_RUN_DEPLOY=true" >> $GITHUB_OUTPUT
            fi
          fi

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:     

      - name: Get shouldRunDeploy
        env:
          shouldRunDeploy: ${{needs.build-and-push-image.outputs.shouldRunDeploy}}
        run: |
          echo "$shouldRunDeploy"
          
      - name: Install Helm, kubectl and yq
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Setup gke-gcloud-auth-plugin'
        run: 'gcloud components install gke-gcloud-auth-plugin'

      - name: 'Config Gcloud cluster in kubectl'
        run: |
          gcloud container clusters get-credentials marshtravel --region=asia-southeast1-a
          kubectl config current-context

      - name: Checkout CD Helm Repo
        uses: actions/checkout@v3
        with:
          repository: MarshTravel/ProjectMarshTravel-CD
          token: ${{ secrets.MY_PAT }}
          path: ./marshtravel-cd

      - name: 'Add values from secret to values.yaml'
        env:
          RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_REFRESH_KEY: ${{ secrets.JWT_REFRESH_KEY }}
          OAUTH2_CLIENT_ID_WEB: ${{ secrets.OAUTH2_CLIENT_ID_WEB }}
          OAUTH2_CLIENT_ID_ANDROID: ${{ secrets.OAUTH2_CLIENT_ID_ANDROID }}
          OAUTH2_CLIENT_ID_IOS: ${{ secrets.OAUTH2_CLIENT_ID_IOS }}
          FIREBASE_SA: ${{ secrets.FIREBASE_SA }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          ls
          cd marshtravel-cd
          ls
          echo "Start writing secrets"
          cp values.yaml.example values.yaml
          cat values.yaml
          yq eval-all -i 'select(fileIndex == 0) | select(.rabbitmq.auth.username) | .rabbitmq.auth.username = env(RABBITMQ_USERNAME)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.rabbitmq.auth.password) | .rabbitmq.auth.password = env(RABBITMQ_PASSWORD)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.mongodb.auth.username) | .mongodb.auth.username = env(MONGODB_USERNAME)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.mongodb.auth.password) | .mongodb.auth.password = env(MONGODB_PASSWORD)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.jwtSecret.secretKey) | .jwtSecret.secretKey = env(JWT_SECRET_KEY)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.jwtSecret.refreshKey) | .jwtSecret.refreshKey = env(JWT_REFRESH_KEY)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.oauth2.clientIdWeb) | .oauth2.clientIdWeb = env(OAUTH2_CLIENT_ID_WEB)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.oauth2.clientIdAndroid) | .oauth2.clientIdAndroid = env(OAUTH2_CLIENT_ID_ANDROID)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.oauth2.clientIdIos) | .oauth2.clientIdIos = env(OAUTH2_CLIENT_ID_IOS)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.firebase.serviceAccount) | .firebase.serviceAccount = env(FIREBASE_SA)' values.yaml values.yaml.example
          yq eval-all -i 'select(fileIndex == 0) | select(.googleMapsAPIKey) | .googleMapsAPIKey = env(GOOGLE_MAPS_API_KEY)' values.yaml values.yaml.example
          echo "End writing secrets"
          cat values.yaml
      
      - name: 'Deploy to GKE with Helm'
        run: |
          ls
          cd marshtravel-cd
          helm dependency build
          helm upgrade --install marshtravel . --namespace default --create-namespace --atomic --timeout 10m0s --wait --debug
          
  


      

      
              
  